<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Script">
		<Properties>
			<bool name="Disabled">false</bool>
			<string name="Name">Animate</string>
			<string name="Source">function waitForChild(parent, childName)&#13;&#10;&#9;while true do&#13;&#10;&#9;&#9;local child = parent:findFirstChild(childName)&#13;&#10;&#9;&#9;if child then&#13;&#10;&#9;&#9;&#9;return child&#13;&#10;&#9;&#9;end&#13;&#10;&#9;&#9;parent.ChildAdded:wait()&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;-- declarations&#13;&#10;&#13;&#10;local Figure = script.Parent&#13;&#10;local Torso = waitForChild(Figure, &quot;Torso&quot;)&#13;&#10;local RightShoulder = waitForChild(Torso, &quot;Right Shoulder&quot;)&#13;&#10;local LeftShoulder = waitForChild(Torso, &quot;Left Shoulder&quot;)&#13;&#10;local RightHip = waitForChild(Torso, &quot;Right Hip&quot;)&#13;&#10;local LeftHip = waitForChild(Torso, &quot;Left Hip&quot;)&#13;&#10;local Neck = waitForChild(Torso, &quot;Neck&quot;)&#13;&#10;local Humanoid = waitForChild(Figure, &quot;Humanoid&quot;)&#13;&#10;local pose = &quot;Standing&quot;&#13;&#10;&#13;&#10;&#13;&#10;-- functions&#13;&#10;&#13;&#10;function onRunning(speed)&#13;&#10;&#9;if speed&gt;0 then&#13;&#10;&#9;&#9;pose = &quot;Running&quot;&#13;&#10;&#9;else&#13;&#10;&#9;&#9;pose = &quot;Standing&quot;&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;function onDied()&#13;&#10;&#9;pose = &quot;Dead&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function onJumping()&#13;&#10;&#9;pose = &quot;Jumping&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function onClimbing()&#13;&#10;&#9;pose = &quot;Climbing&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function onGettingUp()&#13;&#10;&#9;pose = &quot;GettingUp&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function onFreeFall()&#13;&#10;&#9;pose = &quot;FreeFall&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function onFallingDown()&#13;&#10;&#9;pose = &quot;FallingDown&quot;&#13;&#10;end&#13;&#10;&#13;&#10;function moveJump()&#13;&#10;&#9;RightShoulder.MaxVelocity = 0.5&#13;&#10;&#9;LeftShoulder.MaxVelocity = 0.5&#13;&#10;&#9;RightShoulder.DesiredAngle = 3.14&#13;&#10;&#9;LeftShoulder.DesiredAngle = -3.14&#13;&#10;&#9;RightHip.DesiredAngle = 0&#13;&#10;&#9;LeftHip.DesiredAngle = 0&#13;&#10;end&#13;&#10;&#13;&#10;function moveFreeFall()&#13;&#10;&#9;RightShoulder.MaxVelocity = 0.5&#13;&#10;&#9;LeftShoulder.MaxVelocity = 0.5&#13;&#10;&#9;RightShoulder.DesiredAngle = 1&#13;&#10;&#9;LeftShoulder.DesiredAngle = -1&#13;&#10;&#9;RightHip.DesiredAngle = 0&#13;&#10;&#9;LeftHip.DesiredAngle = 0&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;function moveClimb()&#13;&#10;&#9;RightShoulder.MaxVelocity = 0.5&#13;&#10;&#9;LeftShoulder.MaxVelocity = 0.5&#13;&#10;&#9;RightShoulder.DesiredAngle = -3.14&#13;&#10;&#9;LeftShoulder.DesiredAngle = 3.14&#13;&#10;&#9;RightHip.DesiredAngle = 0&#13;&#10;&#9;LeftHip.DesiredAngle = 0&#13;&#10;end&#13;&#10;&#13;&#10;function hasTool()&#13;&#10;&#9;local RightArm = Figure:findFirstChild(&quot;Right Arm&quot;)&#13;&#10;&#9;if (RightArm ~= nil) then&#13;&#10;&#9;&#9;kidTable = RightArm:children()&#13;&#10;&#9;&#9;if (kidTable ~= nil) then&#13;&#10;&#9;&#9;&#9;numKids = #kidTable&#13;&#10;&#9;&#9;&#9;if (numKids &gt; 0) then&#13;&#10;&#9;&#9;&#9;&#9;return true&#13;&#10;&#9;&#9;&#9;end&#13;&#10;&#9;&#9;end&#13;&#10;&#9;end&#13;&#10;&#9;return false&#13;&#10;end&#13;&#10;&#13;&#10;function move(time)&#13;&#10;&#9;local amplitude&#13;&#10;&#9;local frequency&#13;&#10;&#13;&#10;&#9;if (pose == &quot;Jumping&quot;) then&#13;&#10;&#9;&#9;moveJump()&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if (pose == &quot;FreeFall&quot;) then&#13;&#10;&#9;&#9;moveFreeFall()&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;if (pose == &quot;Climbing&quot;) then&#13;&#10;&#9;&#9;moveClimb()&#13;&#10;&#9;&#9;return&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;RightShoulder.MaxVelocity = 0.15&#13;&#10;&#9;LeftShoulder.MaxVelocity = 0.15&#13;&#10;&#9;if (pose == &quot;Running&quot;) then&#13;&#10;&#9;&#9;amplitude = 1&#13;&#10;&#9;&#9;frequency = 9&#13;&#10;&#9;else&#13;&#10;&#9;&#9;amplitude = 0.1&#13;&#10;&#9;&#9;frequency = 1&#13;&#10;&#9;end&#13;&#10;&#13;&#10;&#9;desiredAngle = amplitude * math.sin(time*frequency)&#13;&#10;&#13;&#10;&#9;RightShoulder.DesiredAngle = desiredAngle&#13;&#10;&#9;LeftShoulder.DesiredAngle = desiredAngle&#13;&#10;&#9;RightHip.DesiredAngle = -desiredAngle&#13;&#10;&#9;LeftHip.DesiredAngle = -desiredAngle&#13;&#10;&#13;&#10;&#9;if hasTool() then&#13;&#10;&#9;&#9;RightShoulder.DesiredAngle = 1.57&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;&#13;&#10;&#13;&#10;-- connect events&#13;&#10;&#13;&#10;Humanoid.Died:connect(onDied)&#13;&#10;Humanoid.Running:connect(onRunning)&#13;&#10;Humanoid.Jumping:connect(onJumping)&#13;&#10;Humanoid.Climbing:connect(onClimbing)&#13;&#10;Humanoid.GettingUp:connect(onGettingUp)&#13;&#10;Humanoid.FreeFalling:connect(onFreeFall)&#13;&#10;Humanoid.FallingDown:connect(onFallingDown)&#13;&#10;&#13;&#10;&#13;&#10;-- main program&#13;&#10;&#13;&#10;local nextTime = 0&#13;&#10;local runService = game:service(&quot;RunService&quot;);&#13;&#10;&#13;&#10;while Figure.Parent~=nil do&#13;&#10;&#9;time = runService.Stepped:wait()&#13;&#10;&#9;if time &gt; nextTime then&#13;&#10;&#9;&#9;move(time)&#13;&#10;&#9;&#9;nextTime = time + 0.1&#13;&#10;&#9;end&#13;&#10;end&#13;&#10;</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
</roblox>